#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <QFileDialog>
#include <QMessageBox>
#include <QTextStream>
#include <QImageReader>
#include <QMessageBox>
#include "mc920.h"



//global variable to mainwindow
MedicalImage *image3D;
QImage *imageZ;
QImage *imageY;
QImage *imageX;
ViewDisplay *viewZ;
ViewDisplay *viewY;
ViewDisplay *viewX;


void init(){
    image3D = NULL;
    imageZ = NULL;
    imageY = NULL;
    imageX = NULL;

    //xy plan
    viewZ = (ViewDisplay *)calloc(1,sizeof(ViewDisplay));
    viewZ->horizontalAxis = 'x';
    viewZ->verticalAxis = 'y';
    viewZ->referenceAxis = 'z';
    viewZ->verticalDirection = 1;
    viewZ->horizontalDirection = 1;
    viewZ->slice = 0;

    //zx plan
    viewY = (ViewDisplay *)calloc(1,sizeof(ViewDisplay));
    viewY->horizontalAxis = 'z';
    viewY->verticalAxis = 'x';
    viewY->referenceAxis = 'y';
    viewY->verticalDirection = 1;
    viewY->horizontalDirection = 1;
    viewY->slice = 0;

    //yz plan
    viewX = (ViewDisplay *)calloc(1,sizeof(ViewDisplay));
    viewX->horizontalAxis = 'y';
    viewX->verticalAxis = 'z';
    viewX->referenceAxis = 'x';
    viewX->verticalDirection = 1;
    viewX->horizontalDirection = 1;
    viewX->slice = 0;
}

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    init();
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::on_action3D_Image_triggered()
{

    QString fileName = QFileDialog::getOpenFileName(this, tr("Open File"), QString(),
                                                    tr("Text Files (*.scn);;C++ Files (*.cpp *.h)"));
    if (!fileName.isEmpty()) {

        GrayImage *sliceZ;
        GrayImage *sliceY;
        GrayImage *sliceX;
        image3D = ReadMedicalImage(fileName.toLatin1().data());//reading 3d image

        viewZ->slice = image3D->nz/2;
        viewY->slice = image3D->ny/2;
        viewX->slice = image3D->nx/2;

        sliceZ = getSlice(viewZ->verticalAxis,viewZ->verticalDirection,viewZ->horizontalAxis, viewZ->horizontalDirection, image3D, viewZ->slice);
        sliceY = getSlice(viewY->verticalAxis,viewY->verticalDirection,viewY->horizontalAxis, viewY->horizontalDirection, image3D, viewY->slice);
        sliceX = getSlice(viewX->verticalAxis,viewX->verticalDirection,viewX->horizontalAxis, viewX->horizontalDirection, image3D, viewX->slice);

        //solution1: comprimi 12 bits em 8 bits (desolcamento de 4 bits para a direita)
        //solution2: salva uma imagem png como 16 bits e depois le ela
        int solution = 1;
        if(solution == 1){



            //imageZ = new QImage(sliceZ->nx,sliceZ->ny,QImage::Format_RGB32);
            //imageY = new QImage(sliceY->nx,sliceY->ny,QImage::Format_RGB32);
            //imageX = new QImage(sliceX->nx,sliceX->ny,QImage::Format_RGB32);
            //using qt components to display the images
            if(image3D->nbits > 8){
                imageZ = createGrayImage2LabelArea(sliceZ);
                imageY = createGrayImage2LabelArea(sliceY);
                imageX = createGrayImage2LabelArea(sliceX);
            }else{
                imageZ = create8bitsGrayImage2LabelArea(sliceZ);
                imageY = create8bitsGrayImage2LabelArea(sliceY);
                imageX = create8bitsGrayImage2LabelArea(sliceX);
            }
            displayImageOnLabel(imageZ,ui->labelFigureZ);
            displayImageOnLabel(imageY,ui->labelFigureY);
            displayImageOnLabel(imageX,ui->labelFigureX);
        }if(solution == 2){
//            int nbits = 8;
//            if(image3D->nbits > 8){
//                nbits = 16;
//            }
//            bitsAdjustment(sliceZ,11, true);
//            bitsAdjustment(sliceY,11, true);
//            bitsAdjustment(sliceX,11, true);

//            writeGrayImagePng(sliceZ,nbits, "Z_axis.png");
//            writeGrayImagePng(sliceY,nbits, "Y_axis.png");
//            writeGrayImagePng(sliceX,nbits, "X_axis.png");
//            imageZ = new QImage();
//            imageY = new QImage();
//            imageX = new QImage();

//            QString localFilename;
//            localFilename = "Z_axis.png";
//            QImageReader *reader = new QImageReader(localFilename);
//            reader->setAutoTransform(true);
//            reader->read(imageZ);
//            reader->setFileName("Y_axis.png");
//            reader->read(imageY);
//            reader->setFileName("X_axis.png");
//            reader->read(imageX);

//            ui->labelFigureZ->setPixmap(QPixmap::fromImage((*imageZ)));
//            ui->labelFigureY->setPixmap(QPixmap::fromImage((*imageY)));
//            ui->labelFigureX->setPixmap(QPixmap::fromImage((*imageX)));

        }

    }
    else{
        QMessageBox messageBox;
        messageBox.critical(0,"Error","File is empty");
        messageBox.setFixedSize(500,200);
    }
}

void MainWindow::on_spinBoxImageZ_valueChanged(int arg1)
{
    try{
        int sliceNumber = ui->spinBoxImageZ->text().toInt();
        

    }catch(int e){
        //TODO:
    }

}
